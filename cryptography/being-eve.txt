John Woods


--Diffie Hellman--

Given that g = 11 and p = 59, we get Alice's computation as A = 11^a mod 59 = 57.
Bob's is B = 11^b mod 59 = 44
Given that the integers are rather small, I can simply plug each equation into a calculator and keep trying values
until one's correct. I'll start with Alice's. 11^1 mod 59 = 11, 11^2 mod 59 = 3, and so on. Eventually, I find that
the answer for Alice's is 36, as 11^36 mod 59 = 57. 
Bob's is 15, as 11^5 mod 59 = 44. 
With this info, we can find that the shared secret is 15*36=540. 

Obviously, this method is insanely inefficient, and with larger integers would be completely impractical. My method is just
a manual brute force approach, so it falls apart when the numbers get even a little larger.

--RSA Encryption--


We have Bob's public key, so we know the values for e_B and n_B: 13 and 5561 respectively.
If we presume that Alice's message is encoded via ascii from plaintext, then we know that the output of our mod
should never go above 127. 

With this knowledge in mind, we can write a rather simple python program to try out a wide variety
of values for d_b, and filter out any value that gives a mod result above 127. If we do this with a range of 0-10000,
we find that there are only 8 key values that satisfy this condition (not counting 0 for obvious reasons), and of these
8, only 4 produce readable and varied ascii values (the other 4 just repeat the number 1 forever). Interestingly, all four 
values (1249, 3955, 6661, and 9367) produce the same ascii string, which when converted to plaintext gives us the secret message:

"Hey Bob. It's even worse than we thought! Your pal, Alice. 
https://www.schneier.com/blog/archives/2022/04/airtags-are-used-for-stalking-far-more-than-previously-reported.html"

Note that this method is yet again purely brute force, and thus would take inordinate amounts of time if the numbers
involved were any larger. Because I'm testing each value individually, there literally couldn't be a less efficient way to 
do this unless you trivially worsened the method.

However, note that even if Bob's keys involved larger integers, this still wouldn't be safe. This is because
this message is encrypted character by character, meaning that we see repeats in the message. For instance, the 
number 570 appears many times in the first half, which ends up corresponding to the space character. Similarly, the letter
t (which corresponds to 3433 and is quite common in english) appears 11 times, while e (which corresponds to 3860 and 
is the most common letter in English) appears 15 times. As such, by making some estimations and guessing a few times, it
would not be difficult to decrypt this message with letter frequency alone. 



--Python Code--

Just in case this is necessary, I'll paste my python scrypt that I used for the RSA part below.
Please excuse my rusty code.

  import sys

  numbers = [1516, 3860, 2891, 570, 3483, 4022, 3437, 299,
   570, 843, 3433, 5450, 653, 570, 3860, 482,
   3860, 4851, 570, 2187, 4022, 3075, 653, 3860,
   570, 3433, 1511, 2442, 4851, 570, 2187, 3860,
   570, 3433, 1511, 4022, 3411, 5139, 1511, 3433,
   4180, 570, 4169, 4022, 3411, 3075, 570, 3000,
   2442, 2458, 4759, 570, 2863, 2458, 3455, 1106,
   3860, 299, 570, 1511, 3433, 3433, 3000, 653,
   3269, 4951, 4951, 2187, 2187, 2187, 299, 653,
   1106, 1511, 4851, 3860, 3455, 3860, 3075, 299,
   1106, 4022, 3194, 4951, 3437, 2458, 4022, 5139,
   4951, 2442, 3075, 1106, 1511, 3455, 482, 3860,
   653, 4951, 2875, 3668, 2875, 2875, 4951, 3668,
   4063, 4951, 2442, 3455, 3075, 3433, 2442, 5139,
   653, 5077, 2442, 3075, 3860, 5077, 3411, 653,
   3860, 1165, 5077, 2713, 4022, 3075, 5077, 653,
   3433, 2442, 2458, 3409, 3455, 4851, 5139, 5077,
   2713, 2442, 3075, 5077, 3194, 4022, 3075, 3860,
   5077, 3433, 1511, 2442, 4851, 5077, 3000, 3075,
   3860, 482, 3455, 4022, 3411, 653, 2458, 2891,
   5077, 3075, 3860, 3000, 4022, 3075, 3433, 3860,
   1165, 299, 1511, 3433, 3194, 2458]

  def decode(numbers, key):
      count = 0
      for x in numbers:
          if ((x**key % 5561) > 127):
              count = 0
              break
          else: 
              #print(x**key % 5561)
              count = count + 1
              if (count > 100):
                  print("Key is " + str(key))
                  break

  def trueDecode(numbers, key):
      res = ""
      for i in numbers:
          result = i**key%5561
          print(str(result))
          res = res + chr(result)
      print("String: ", str(res))

  def find():
      for i in range(10000):
          decode(numbers, i)

  #find()
  trueDecode(numbers, 9367)
